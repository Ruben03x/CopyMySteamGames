<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Your Steam Games</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="bg-dark text-light">
  <div class="container my-5">
    <h1 class="mb-4 text-center">Steam Games List</h1>
    <h3 class="text-center">Total Games: <%= gameCount %></h3>

    <div class="text-center mb-4">
      <a href="/" class="btn btn-secondary">Search Another User</a>
      <button id="copyBtn" class="btn btn-primary">Copy List</button>
    </div>

    <!-- Toggle Options -->
    <div class="text-center mb-3">
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="togglePlaytime" checked>
        <label class="form-check-label" for="togglePlaytime">Playtime</label>
      </div>
      <div class="form-check form-check-inline">
        <input class="form-check-input" type="checkbox" id="toggleAchievements" checked>
        <label class="form-check-label" for="toggleAchievements">Achievements</label>
      </div>
    </div>

    <!-- Sorting Options -->
    <div class="text-center mb-3">
      <label for="sortOptions" class="form-label">Sort Games By:</label>
      <select id="sortOptions" class="form-select w-50 mx-auto">
        <option value="alphabetical" selected>Alphabetically</option>
        <option value="playtime">Playtime</option>
        <option value="achievements">Achievements</option>
      </select>
    </div>

    <!-- Game Names List -->
    <div class="list-group" id="gamesList">
      <% if (games && games.length > 0) { %>
        <% games.forEach(game => { %>
          <div class="list-group-item bg-secondary text-light mb-2 d-flex flex-column flex-md-row justify-content-between align-items-center">
            <span class="game-title"><%= game.name %></span>
            <div class="game-details mt-2 mt-md-0">
              <% if (game.playtime_forever) { %>
                <span class="playtime" data-playtime="<%= game.playtime_forever %>">Playtime: <%= Math.floor(game.playtime_forever / 60) %> hrs</span>
              <% } else { %>
                <span class="playtime" data-playtime="0">Playtime: 0 hrs</span>
              <% } %>
              <% if (game.achievements_total > 0) { %>
                <span class="achievements" data-achieved="<%= game.achievements_achieved %>" data-total="<%= game.achievements_total %>"></span>
              <% } else { %>
                <span class="achievements" data-achieved="0" data-total="0">Achievements: N/A</span>
              <% } %>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <p>No games found for this user.</p>
      <% } %>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Get references to elements
    const togglePlaytime = document.getElementById('togglePlaytime');
    const toggleAchievements = document.getElementById('toggleAchievements');
    const gamesList = document.getElementById('gamesList');
    const sortOptions = document.getElementById('sortOptions');
    const copyBtn = document.getElementById('copyBtn');

    // Function to toggle Playtime and Achievements
    function toggleDetails() {
      const gameDetails = gamesList.querySelectorAll('.game-details');
      gameDetails.forEach(detail => {
        const playtime = detail.querySelector('.playtime');
        const achievements = detail.querySelector('.achievements');

        if (togglePlaytime.checked && playtime) {
          playtime.classList.remove('d-none');
        } else if (playtime) {
          playtime.classList.add('d-none');
        }

        if (toggleAchievements.checked && achievements) {
          achievements.classList.remove('d-none');
        } else if (achievements) {
          achievements.classList.add('d-none');
        }
      });
    }

    // Function to convert achievements to percentage
    function convertAchievementsToPercentage() {
      const achievements = gamesList.querySelectorAll('.achievements');
      achievements.forEach(ach => {
        const achieved = parseInt(ach.getAttribute('data-achieved'));
        const total = parseInt(ach.getAttribute('data-total'));
        if (total > 0) {
          const percentage = ((achieved / total) * 100).toFixed(2) + '%';
          ach.innerText = `Achievements: ${percentage}`;
        } else {
          ach.innerText = 'Achievements: N/A';
        }
      });
    }

    // Initial conversion on page load
    convertAchievementsToPercentage();

    // Initial toggle display
    toggleDetails();

    // Event listeners for toggles
    togglePlaytime.addEventListener('change', toggleDetails);
    toggleAchievements.addEventListener('change', toggleDetails);

    // Function to sort games
    function sortGames() {
      const games = Array.from(gamesList.querySelectorAll('.list-group-item'));
      const sortBy = sortOptions.value;

      games.sort((a, b) => {
        if (sortBy === 'alphabetical') {
          const nameA = a.querySelector('.game-title').innerText.toLowerCase();
          const nameB = b.querySelector('.game-title').innerText.toLowerCase();
          return nameA.localeCompare(nameB);
        } else if (sortBy === 'playtime') {
          const playtimeA = parseInt(a.querySelector('.playtime') ? a.querySelector('.playtime').getAttribute('data-playtime') : 0);
          const playtimeB = parseInt(b.querySelector('.playtime') ? b.querySelector('.playtime').getAttribute('data-playtime') : 0);
          return playtimeB - playtimeA;
        } else if (sortBy === 'achievements') {
          const achA = a.querySelector('.achievements');
          const achB = b.querySelector('.achievements');

          const achievedA = achA ? parseInt(achA.getAttribute('data-achieved')) : 0;
          const totalA = achA ? parseInt(achA.getAttribute('data-total')) : 0;
          const percentA = totalA > 0 ? (achievedA / totalA) * 100 : 0;

          const achievedB = achB ? parseInt(achB.getAttribute('data-achieved')) : 0;
          const totalB = achB ? parseInt(achB.getAttribute('data-total')) : 0;
          const percentB = totalB > 0 ? (achievedB / totalB) * 100 : 0;

          return percentB - percentA;
        } else {
          return 0;
        }
      });

      // Clear and re-append sorted games
      gamesList.innerHTML = "";
      games.forEach(game => gamesList.appendChild(game));

      // After sorting, ensure the achievement percentages are updated correctly
      convertAchievementsToPercentage();
    }

    // Event listener for sorting
    sortOptions.addEventListener('change', sortGames);

    // Initial sort by alphabetical
    sortGames();

    // Function to copy visible game information
    copyBtn.addEventListener('click', function() {
      const games = Array.from(gamesList.querySelectorAll('.list-group-item'));
      const includePlaytime = togglePlaytime.checked;
      const includeAchievements = toggleAchievements.checked;

      let gamesText = "";

      games.forEach(game => {
        const title = game.querySelector('.game-title').innerText.trim();
        let line = title;

        if (includePlaytime) {
          const playtimeElement = game.querySelector('.playtime');
          const playtime = playtimeElement && !playtimeElement.classList.contains('d-none') ?
            playtimeElement.innerText.replace('Playtime: ', '') :
            '';
          line += playtime ? ` - Playtime: ${playtime}` : '';
        }

        if (includeAchievements) {
          const achievementsElement = game.querySelector('.achievements');
          const achievements = achievementsElement && !achievementsElement.classList.contains('d-none') ?
            achievementsElement.innerText.replace('Achievements: ', '') :
            '';
          line += achievements ? ` - Achievements: ${achievements}` : '';
        }

        gamesText += line + '\n';
      });

      navigator.clipboard.writeText(gamesText)
        .then(() => alert("Game list copied to clipboard!"))
        .catch(err => console.error("Could not copy text: ", err));
    });
  </script>
</body>
</html>
